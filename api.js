// api.js
const express = require('express');
const router = express.Router();
// ‡¶Æ‡¶°‡¶ø‡¶â‡¶≤‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá destructuring ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶¶‡¶æ‡¶®‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
const { pool } = require('./db'); 
const { pointsToBdt, handleWithdrawRequest } = require('./logic');
const { Telegraf } = require('telegraf');
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = process.env.ADMIN_ID;

// --- ‡ßß. ‡¶Æ‡¶®‡¶ø‡¶ü‡ßá‡¶ó S2S ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï API ‡¶∞‡ßÅ‡¶ü ---
// ... (Monetag ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§) ...

// --- ‡ß®. ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü API ‡¶∞‡ßÅ‡¶ü ---
router.post('/withdraw', async (req, res) => {
    // paymentMethod ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶¨‡¶°‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶≤‡ßã
    const { telegramId, points, paymentAddress, paymentMethod } = req.body;

    const result = await handleWithdrawRequest(telegramId, points, paymentAddress, paymentMethod);
    
    if (result.success) {
        // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡ßá ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
        const message = `üö® ‡¶®‡¶§‡ßÅ‡¶® ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü!\n‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ID: ${telegramId}\n‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü: ${points}\n‡¶ü‡¶æ‡¶ï‡¶æ: ${pointsToBdt(points)} BDT\n‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶°: ${paymentMethod}\n‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßç‡¶∞‡ßá‡¶∏: ${paymentAddress}`;
        bot.telegram.sendMessage(ADMIN_ID, message);
        
        return res.status(200).json(result);
    } else {
        return res.status(400).json(result); 
    }
});

// --- ‡ß©. ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ API ‡¶∞‡ßÅ‡¶ü (‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø) ---
router.get('/user-data', async (req, res) => {
    const telegramId = req.query.id;

    // ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶™‡ßÅ‡¶≤ ‡¶≤‡ßã‡¶° ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡¶ï‡¶∞‡¶£
    if (!pool || !pool.query) {
        console.error("‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶™‡ßÅ‡¶≤ ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡¶®‡¶ø ‡¶¨‡¶æ ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶®‡ßá‡¶á‡•§");
        return res.status(503).json({ success: false, message: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶®‡¶Ø‡¶º (DB Error)" });
    }

    try {
        // ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶∏‡¶π ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ ‡¶π‡¶≤‡ßã
        const userResult = await pool.query('SELECT total_points, referral_code FROM users WHERE telegram_id = $1', [telegramId]);
        const referralCountResult = await pool.query('SELECT COUNT(*) AS count FROM users WHERE referred_by_id = $1', [telegramId]);
        const referralCount = referralCountResult.rows.length ? referralCountResult.rows[0].count : 0;
        
        if (userResult.rows.length > 0) {
            return res.json({ 
                success: true, 
                points: userResult.rows[0].total_points,
                referral_code: userResult.rows[0].referral_code,
                referral_count: referralCount // ‡¶®‡¶§‡ßÅ‡¶® ‡¶°‡ßá‡¶ü‡¶æ
            });
        }
        return res.status(404).json({ success: false, message: "‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§" });

    } catch (error) {
        console.error("‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:", error);
        res.status(500).json({ success: false, message: "‡¶Ö‡¶≠‡ßç‡¶Ø‡¶®‡ßç‡¶§‡¶∞‡ßÄ‡¶£ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡•§" });
    }
});

// router ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡¶ü‡¶ø ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã (‡¶Ü‡¶ó‡ßá‡¶∞ TypeError ‡¶†‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá)
module.exports = router;
