// api.js
const express = require('express');
const router = express.Router();
// ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá db.js ‡¶•‡ßá‡¶ï‡ßá pool ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
const { pool } = require('./db'); 
const { pointsToBdt, handleWithdrawRequest } = require('./logic');
const { Telegraf } = require('telegraf');
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = process.env.ADMIN_ID;

// --- ‡ßß. ‡¶Æ‡¶®‡¶ø‡¶ü‡ßá‡¶ó S2S ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï API ‡¶∞‡ßÅ‡¶ü ---
router.post('/monetag-callback', async (req, res) => {
    const { user_id, transaction_id, status } = req.body; 
    
    if (status === 'success' && user_id) {
        try {
            // ad_view_logs ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
            const logResult = await pool.query(
                'INSERT INTO ad_view_logs (user_id, monetag_transaction_id, points_awarded, is_verified) VALUES ($1, $2, 5, TRUE) ON CONFLICT (monetag_transaction_id) DO NOTHING RETURNING log_id',
                [user_id, transaction_id]
            );

            if (logResult.rows.length > 0) {
                await pool.query(
                    'UPDATE users SET total_points = total_points + 5 WHERE telegram_id = $1',
                    [user_id]
                );
                return res.json({ status: 'ok', message: '‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá' }); 
            }
        } catch (error) {
            console.error('Monetag Callback Error:', error);
        }
    }
    res.json({ status: 'error', message: '‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶¨‡¶æ ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü' }); 
});

// --- ‡ß®. ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü API ‡¶∞‡ßÅ‡¶ü ---
router.post('/withdraw', async (req, res) => {
    const { telegramId, points, paymentAddress } = req.body;

    const result = await handleWithdrawRequest(telegramId, points, paymentAddress);
    
    if (result.success) {
        const message = `üö® ‡¶®‡¶§‡ßÅ‡¶® ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü!\n‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ID: ${telegramId}\n‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü: ${points}\n‡¶ü‡¶æ‡¶ï‡¶æ: ${pointsToBdt(points)} BDT\n‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßç‡¶∞‡ßá‡¶∏: ${paymentAddress}`;
        bot.telegram.sendMessage(ADMIN_ID, message);
        
        return res.status(200).json(result);
    } else {
        return res.status(400).json(result); 
    }
});

// --- ‡ß©. ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ API ‡¶∞‡ßÅ‡¶ü (‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø) ---
router.get('/user-data', async (req, res) => {
    const telegramId = req.query.id;

    // pool undefined ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶π‡¶Ø‡¶º, pool.query() ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá pool ‡¶ï‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
    if (!pool) {
        console.error("‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶™‡ßÅ‡¶≤ ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡¶®‡¶ø!");
        return res.status(503).json({ success: false, message: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶®‡¶Ø‡¶º (DB Error)" });
    }

    try {
        const result = await pool.query('SELECT total_points, referral_code FROM users WHERE telegram_id = $1', [telegramId]);
        
        if (result.rows.length > 0) {
            return res.json({ 
                success: true, 
                points: result.rows[0].total_points,
                referral_code: result.rows[0].referral_code 
            });
        }
        return res.status(404).json({ success: false, message: "‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§" });

    } catch (error) {
        console.error("‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:", error);
        res.status(500).json({ success: false, message: "‡¶Ö‡¶≠‡ßç‡¶Ø‡¶®‡ßç‡¶§‡¶∞‡ßÄ‡¶£ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡•§" });
    }
});

module.exports = router;
