// api.js

const express = require('express');
const router = express.Router();
// ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ß‡¶∞‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶Ø‡ßá db.js (‡¶¨‡¶æ server.js ‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã) ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßÅ‡¶≤‡¶ü‡¶ø‡¶ï‡ßá ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá
// ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶ø server.js ‡¶è pool ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶®, ‡¶§‡¶¨‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶è‡¶ü‡¶ø module.exports ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
// ‡¶Ü‡¶™‡¶æ‡¶§‡¶§ ‡¶ß‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø server.js ‡¶è pool ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø Pool object ‡¶™‡¶æ‡¶∏ ‡¶π‡¶¨‡ßá‡•§
// ‡¶è‡¶ü‡¶ø server.js ‡¶è ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá: app.use('/api', apiRouter(pool));
module.exports = (pool, bot, adminId) => {
    
    // --- ‡¶á‡¶â‡¶ü‡¶ø‡¶≤‡¶ø‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---

    // ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®: 10,000 Points = 40 Taka
    const pointsToBdt = (points) => {
        return (points / 10000) * 40;
    }

    // ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤‡¶ø‡¶Ç ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (server.js ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá)
    const handleWithdrawRequest = async (telegramId, requestedPoints, paymentAddress) => {
        const WITHDRAW_START_HOUR = 6;
        const WITHDRAW_END_HOUR = 20; 
        const MIN_WITHDRAW_POINTS = 10000;
        const MAX_WITHDRAW_POINTS = 100000;
        const DAILY_LIMIT = 3;
        const now = new Date();
        const currentHour = now.getHours();

        // ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶ö‡ßá‡¶ï (‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ)
        if (currentHour < WITHDRAW_START_HOUR || currentHour >= WITHDRAW_END_HOUR) {
            return { success: false, message: "‚ùå ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶∏‡¶ï‡¶æ‡¶≤ ‡ß¨‡¶ü‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‡¶æ‡¶§ ‡ßÆ‡¶ü‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§‡•§ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶Ü‡¶õ‡ßá‡•§" };
        }
        
        // ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶ö‡ßá‡¶ï
        if (requestedPoints < MIN_WITHDRAW_POINTS || requestedPoints > MAX_WITHDRAW_POINTS) {
            return { success: false, message: `‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ${MIN_WITHDRAW_POINTS} ‡¶•‡ßá‡¶ï‡ßá ${MAX_WITHDRAW_POINTS} ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§` };
        }

        const client = await pool.connect();
        try {
            await client.query('BEGIN');

            // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶ö‡ßá‡¶ï
            const userResult = await client.query(
                'SELECT total_points, daily_withdraw_count FROM users WHERE telegram_id = $1 FOR UPDATE',
                [telegramId]
            );
            const user = userResult.rows[0];

            if (!user || user.total_points < requestedPoints) {
                return { success: false, message: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶®‡ßá‡¶á‡•§" };
            }
            if (user.daily_withdraw_count >= DAILY_LIMIT) {
                return { success: false, message: `‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü (${DAILY_LIMIT} ‡¶¨‡¶æ‡¶∞) ‡¶Ö‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶Æ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§` };
            }

            // ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡ßá‡¶≠
            const amountInBdt = pointsToBdt(requestedPoints);
            await client.query(
                'INSERT INTO withdraw_requests (user_id, points_requested, amount_in_bdt, payment_address) VALUES ($1, $2, $3, $4)',
                [telegramId, requestedPoints, amountInBdt.toFixed(2), paymentAddress]
            );

            // ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
            await client.query(
                'UPDATE users SET total_points = total_points - $1, daily_withdraw_count = daily_withdraw_count + 1 WHERE telegram_id = $2',
                [requestedPoints, telegramId]
            );

            await client.query('COMMIT');
            return { success: true, message: `‚úÖ ${requestedPoints} ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ (${amountInBdt.toFixed(2)} BDT) ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶Æ‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§` };

        } catch (e) {
            await client.query('ROLLBACK');
            throw e; // ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞.js ‡¶è ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
        } finally {
            client.release();
        }
    }


    // --- ‡ßß. ‡¶Æ‡¶®‡¶ø‡¶ü‡ßá‡¶ó S2S ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï API ‡¶∞‡ßÅ‡¶ü ---
    router.post('/monetag-callback', async (req, res) => {
        const { user_id, transaction_id, status } = req.body; 

        // SECURITY: Monetag ‡¶∏‡¶ø‡¶ï‡¶ø‡¶â‡¶∞‡¶ø‡¶ü‡¶ø ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
        // if (req.query.secret !== process.env.MONETAG_SECRET_KEY) { return res.status(403).send('Forbidden'); } 

        if (!user_id || !transaction_id || status !== 'success') {
            return res.status(400).json({ status: 'error', message: '‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶¨‡¶æ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§' });
        }

        try {
            const logResult = await pool.query(
                'INSERT INTO ad_view_logs (user_id, monetag_transaction_id, points_awarded, is_verified) VALUES ($1, $2, 5, TRUE) ON CONFLICT (monetag_transaction_id) DO NOTHING RETURNING log_id',
                [user_id, transaction_id]
            );

            if (logResult.rows.length > 0) {
                // ‡ß´ ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶®
                await pool.query(
                    'UPDATE users SET total_points = total_points + 5 WHERE telegram_id = $1',
                    [user_id]
                );
                return res.json({ status: 'ok', message: '‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá' });
            } else {
                return res.json({ status: 'info', message: '‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶≤‡ßã' });
            }
        } catch (error) {
            console.error('Monetag Callback Error:', error);
            res.status(500).json({ status: 'error', message: '‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø' });
        }
    });

    // --- ‡ß®. ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü API ‡¶∞‡ßÅ‡¶ü ---
    router.post('/withdraw', async (req, res) => {
        const { telegramId, points, paymentAddress } = req.body;

        if (!telegramId || !points || !paymentAddress) {
            return res.status(400).json({ success: false, message: "‚ùå ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§" });
        }

        try {
            const result = await handleWithdrawRequest(telegramId, points, paymentAddress);
            
            if (result.success) {
                // ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®
                const amountInBdt = pointsToBdt(points);
                const message = `üö® ‡¶®‡¶§‡ßÅ‡¶® ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü!\n‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ID: ${telegramId}\n‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü: ${points}\n‡¶ü‡¶æ‡¶ï‡¶æ: ${amountInBdt.toFixed(2)} BDT\n‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßç‡¶∞‡ßá‡¶∏: ${paymentAddress}`;
                bot.telegram.sendMessage(adminId, message); // bot ‡¶è‡¶¨‡¶Ç adminId ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
                
                return res.status(200).json(result);
            } else {
                return res.status(400).json(result); 
            }
        } catch (error) {
            console.error("‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ API ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:", error);
            return res.status(500).json({ success: false, message: "‚ùå ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶≠‡ßç‡¶Ø‡¶®‡ßç‡¶§‡¶∞‡ßÄ‡¶£ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§" });
        }
    });

    // --- ‡ß©. ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ API ‡¶∞‡ßÅ‡¶ü ---
    router.get('/user-data', async (req, res) => {
        const telegramId = req.query.id;
        if (!telegramId) {
            return res.status(400).json({ success: false, message: "‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï‡•§" });
        }

        try {
            const result = await pool.query('SELECT total_points, referral_code FROM users WHERE telegram_id = $1', [telegramId]);
            
            if (result.rows.length > 0) {
                return res.json({ 
                    success: true, 
                    points: result.rows[0].total_points,
                    referral_code: result.rows[0].referral_code 
                });
            }
            return res.status(404).json({ success: false, message: "‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§" });

        } catch (error) {
            console.error("‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:", error);
            res.status(500).json({ success: false, message: "‡¶Ö‡¶≠‡ßç‡¶Ø‡¶®‡ßç‡¶§‡¶∞‡ßÄ‡¶£ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡•§" });
        }
    });

    return router;
};
