// api.js - (‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞‡ßÄ ‡¶ï‡ßã‡¶°)
const express = require('express');
const router = express.Router();
const { pool } = require('./db'); 
const { pointsToBdt, handleWithdrawRequest } = require('./logic');
const { Telegraf } = require('telegraf');
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = process.env.ADMIN_ID;

// --- ‡ßß. ‡¶Æ‡¶®‡¶ø‡¶ü‡ßá‡¶ó S2S ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï API ‡¶∞‡ßÅ‡¶ü ---
router.post('/monetag-callback', async (req, res) => {
    // ... (Monetag ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá) ...
    res.status(200).send('OK');
});

// --- ‡ß®. ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü API ‡¶∞‡ßÅ‡¶ü ---
router.post('/withdraw', async (req, res) => {
    const { telegramId, points, paymentAddress, paymentMethod } = req.body;

    const result = await handleWithdrawRequest(telegramId, points, paymentAddress, paymentMethod);
    
    if (result.success) {
        const message = `üö® ‡¶®‡¶§‡ßÅ‡¶® ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü!\n‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ID: ${telegramId}\n‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü: ${points}\n‡¶ü‡¶æ‡¶ï‡¶æ: ${pointsToBdt(points)} BDT\n‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶°: ${paymentMethod}\n‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßç‡¶∞‡ßá‡¶∏: ${paymentAddress}`;
        bot.telegram.sendMessage(ADMIN_ID, message);
        
        return res.status(200).json(result);
    } else {
        return res.status(400).json(result); 
    }
});

// --- ‡ß©. ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ API ‡¶∞‡ßÅ‡¶ü (‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø) ---
router.get('/user-data', async (req, res) => {
    const telegramId = req.query.id;

    if (!pool || !pool.query) {
        return res.status(503).json({ success: false, message: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶®‡¶Ø‡¶º (DB Error)" });
    }

    try {
        const userResult = await pool.query('SELECT total_points, referral_code FROM users WHERE telegram_id = $1', [telegramId]);
        const referralCountResult = await pool.query('SELECT COUNT(*) AS count FROM users WHERE referred_by_id = $1', [telegramId]);
        const referralCount = referralCountResult.rows.length ? referralCountResult.rows[0].count : 0;
        
        if (userResult.rows.length > 0) {
            return res.json({ 
                success: true, 
                points: userResult.rows[0].total_points,
                referral_code: userResult.rows[0].referral_code,
                referral_count: referralCount 
            });
        }
        // ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá 404 ‡¶®‡¶Ø‡¶º, 0 ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§
        // ‡¶Ø‡¶æ‡¶§‡ßá Mini App-‡¶è "‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø" ‡¶®‡¶æ ‡¶¶‡ßá‡¶ñ‡¶ø‡¶Ø‡¶º‡ßá "0" ‡¶¶‡ßá‡¶ñ‡¶æ‡¶Ø‡¶º‡•§
        return res.json({ 
            success: true, 
            points: 0,
            referral_code: `r_${telegramId}`, 
            referral_count: 0
        });

    } catch (error) {
        console.error("‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:", error);
        res.status(500).json({ success: false, message: "‡¶Ö‡¶≠‡ßç‡¶Ø‡¶®‡ßç‡¶§‡¶∞‡ßÄ‡¶£ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡•§" });
    }
});

module.exports = router;
