// logic.js
const { pool } = require('./db'); 

// --- ‡¶ï‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü‡¶∏ ---
const MIN_WITHDRAW_POINTS = 10000;
const MAX_WITHDRAW_POINTS = 100000;
const DAILY_LIMIT = 3;
const REFERRAL_BONUS = 250;
const POINTS_PER_AD = 5;
const WITHDRAW_START_HOUR = 6;  // ‡¶∏‡¶ï‡¶æ‡¶≤ 6‡¶ü‡¶æ
const WITHDRAW_END_HOUR = 20;   // ‡¶∞‡¶æ‡¶§ 8‡¶ü‡¶æ (20:00)

// ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞
function pointsToBdt(points) {
    // 10,000 Points = 40 Taka
    return (points / 10000) * 40;
}

// --- ‡ßß. ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶≤‡¶ú‡¶ø‡¶ï ---
async function registerUser(telegramId, username, referrerCode) {
    const newReferralCode = `r_${telegramId}`; 
    let referrerId = null;
    let bonus = false;
    
    // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ü‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶® ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
    const existingUser = await pool.query('SELECT telegram_id FROM users WHERE telegram_id = $1', [telegramId]);
    if (existingUser.rows.length > 0) {
        return { isNew: false };
    }
    
    // ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡¶æ‡¶∞‡¶ï‡ßá ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßã‡¶®‡¶æ‡¶∏ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶®
    if (referrerCode) {
        const referrer = await pool.query('SELECT telegram_id FROM users WHERE referral_code = $1', [referrerCode]);
        if (referrer.rows.length) {
            referrerId = referrer.rows[0].telegram_id;
            
            // ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡¶æ‡¶∞‡¶ï‡ßá ‡ß®‡ß´‡ß¶ ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶®
            await pool.query(
                'UPDATE users SET total_points = total_points + $1 WHERE telegram_id = $2', 
                [REFERRAL_BONUS, referrerId]
            );
            bonus = true;
        }
    }

    // ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
    try {
        await pool.query(
            'INSERT INTO users (telegram_id, username, total_points, referred_by_id, referral_code) VALUES ($1, $2, $3, $4, $5)',
            [telegramId, username, 0, referrerId, newReferralCode]
        );
        return { isNew: true, referrerId: referrerId, bonus: bonus };
    } catch (e) {
        console.error("‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® (INSERT) ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:", e);
        // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º
        return { isNew: false }; 
    }
}

// --- ‡ß®. ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤‡¶ø‡¶Ç ‡¶≤‡¶ú‡¶ø‡¶ï ---
async function handleWithdrawRequest(telegramId, requestedPoints, paymentAddress, bot, ADMIN_ID) {
    const now = new Date();
    const currentHour = now.getHours();

    // ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶ö‡ßá‡¶ï (‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ)
    if (currentHour < WITHDRAW_START_HOUR || currentHour >= WITHDRAW_END_HOUR) {
        return { success: false, message: "‚ùå ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶∏‡¶ï‡¶æ‡¶≤ ‡ß¨‡¶ü‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‡¶æ‡¶§ ‡ßÆ‡¶ü‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§‡•§ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶Ü‡¶õ‡ßá‡•§" };
    }
    
    // ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶ö‡ßá‡¶ï
    if (requestedPoints < MIN_WITHDRAW_POINTS || requestedPoints > MAX_WITHDRAW_POINTS) {
        return { success: false, message: `‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ${MIN_WITHDRAW_POINTS} ‡¶•‡ßá‡¶ï‡ßá ${MAX_WITHDRAW_POINTS} ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§` };
    }

    const client = await pool.connect();
    try {
        await client.query('BEGIN'); // ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ

        // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
        const userResult = await client.query(
            'SELECT total_points, daily_withdraw_count FROM users WHERE telegram_id = $1 FOR UPDATE',
            [telegramId]
        );
        const user = userResult.rows[0];

        if (!user || user.total_points < requestedPoints) {
            await client.query('ROLLBACK');
            return { success: false, message: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶®‡ßá‡¶á‡•§" };
        }
        if (user.daily_withdraw_count >= DAILY_LIMIT) {
            await client.query('ROLLBACK');
            return { success: false, message: `‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü (${DAILY_LIMIT} ‡¶¨‡¶æ‡¶∞) ‡¶Ö‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶Æ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§` };
        }

        // ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡ßá‡¶≠
        const amountInBdt = pointsToBdt(requestedPoints);
        await client.query(
            'INSERT INTO withdraw_requests (user_id, points_requested, amount_in_bdt, payment_address) VALUES ($1, $2, $3, $4)',
            [telegramId, requestedPoints, amountInBdt.toFixed(2), paymentAddress]
        );

        // ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶ì ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
        await client.query(
            'UPDATE users SET total_points = total_points - $1, daily_withdraw_count = daily_withdraw_count + 1 WHERE telegram_id = $2',
            [requestedPoints, telegramId]
        );

        await client.query('COMMIT'); // ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶∏‡¶´‡¶≤
        
        // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
        const message = `üö® ‡¶®‡¶§‡ßÅ‡¶® ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü!\n‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ID: ${telegramId}\n‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü: ${requestedPoints}\n‡¶ü‡¶æ‡¶ï‡¶æ: ${amountInBdt.toFixed(2)} BDT\n‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßç‡¶∞‡ßá‡¶∏: ${paymentAddress}`;
        if (bot && ADMIN_ID) {
             bot.telegram.sendMessage(ADMIN_ID, message);
        }

        return { success: true, message: `‚úÖ ${requestedPoints} ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ (${amountInBdt.toFixed(2)} BDT) ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶Æ‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§` };

    } catch (e) {
        await client.query('ROLLBACK'); // ‡¶ï‡ßã‡¶®‡ßã ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶≤‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
        console.error("‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:", e);
        return { success: false, message: "‚ùå ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶≠‡ßç‡¶Ø‡¶®‡ßç‡¶§‡¶∞‡ßÄ‡¶£ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§" };
    } finally {
        client.release();
    }
}

// --- ‡ß©. ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡¶ú‡¶ø‡¶ï (Monetag-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø) ---
async function awardMonetagPoints(userId, transactionId) {
    try {
        // ‡¶°‡¶æ‡¶¨‡¶≤-‡¶ï‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶ü ‡¶è‡¶°‡¶º‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ad_view_logs ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
        const logResult = await pool.query(
            'INSERT INTO ad_view_logs (user_id, monetag_transaction_id, points_awarded, is_verified) VALUES ($1, $2, $3, TRUE) ON CONFLICT (monetag_transaction_id) DO NOTHING RETURNING log_id',
            [userId, transactionId, POINTS_PER_AD]
        );

        if (logResult.rows.length > 0) {
             // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶®
            await pool.query(
                'UPDATE users SET total_points = total_points + $1 WHERE telegram_id = $2',
                [POINTS_PER_AD, userId]
            );
            return { awarded: true };
        } else {
            return { awarded: false, message: '‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶®' };
        }
    } catch (error) {
        console.error('Monetag ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:', error);
        throw error;
    }
}


module.exports = {
    pointsToBdt,
    registerUser,
    handleWithdrawRequest,
    awardMonetagPoints,
    MIN_WITHDRAW_POINTS,
    MAX_WITHDRAW_POINTS
};
