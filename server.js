// server.js - (CORS рж╕ржорж╛ржзрж╛ржи ржПржмржВ ржЕрзНржпрж╛ржбржорж┐ржи ржмрж╛ржЯржи рж▓ржЬрж┐ржХ рж╕рж╣ ржЪрзВржбрж╝рж╛ржирзНржд ржХрзЛржб)
const express = require('express');
const { Telegraf } = require('telegraf');
const apiRouter = require('./api');
const { registerUser } = require('./logic');
const { pool } = require('./db'); 
require('dotenv').config();

// --- ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи ---
const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = process.env.ADMIN_ID; // ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ ржЖржкржирж╛рж░ рж╕ржарж┐ржХ Telegram ID ржПржЦрж╛ржирзЗ рж╕рзЗржЯ ржХрж░рж╛ ржЖржЫрзЗ
const MINI_APP_URL = process.env.MINI_APP_URL; 
const BOT_USERNAME = 'EarnQuick_Official_bot'; // ржЖржкржирж╛рж░ ржмржЯрзЗрж░ ржЗржЙржЬрж╛рж░ржирзЗржо ржжрж┐ржи

// --- ржЕрзНржпрж╛ржк ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи ---
const app = express();
const bot = new Telegraf(BOT_TOKEN, { username: BOT_USERNAME }); 

app.use(express.json()); 

// **CORS рж╕ржорж╛ржзрж╛ржи:** ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ рждрзНрж░рзБржЯрж┐ ржарж┐ржХ ржХрж░рж╛рж░ ржЬржирзНржп
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*'); 
    res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    
    // Preflight (OPTIONS) рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛
    if (req.method === 'OPTIONS') {
        return res.sendStatus(200);
    }
    next();
});

app.use('/api', apiRouter); 

// --- ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ рж▓ржЬрж┐ржХ ---
bot.start(async (ctx) => {
    const telegramId = ctx.from.id;
    const is_admin = telegramId.toString() === ADMIN_ID; // ржЕрзНржпрж╛ржбржорж┐ржи ржЖржЗржбрж┐ ржЪрзЗржХ
    const payload = ctx.startPayload; 
    let referrerCode = null;
    if (payload && payload.startsWith('r_')) {
        referrerCode = payload; 
    }
    
    let message = `рж╕рзНржмрж╛ржЧрждржо ${ctx.from.first_name}! ржЕрзНржпрж╛ржб ржжрзЗржЦрзЗ ржЖрзЯ ржХрж░рж╛ рж╢рзБрж░рзБ ржХрж░рзБржиред`;
    
    try {
        const user = await registerUser(telegramId, ctx.from.username, referrerCode);
        if (user && user.isNew && user.bonus) {
            message += `\nЁЯОБ ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж┐ рж░рзЗржлрж╛рж░рзЗрж▓рзЗрж░ ржорж╛ржзрзНржпржорзЗ ржПрж╕рзЗржЫрзЗржиред`;
            if(user.referrerId) {
                 bot.telegram.sendMessage(user.referrerId, `ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ ржХрж░рж╛ ржирждрзБржи ржЗржЙржЬрж╛рж░ ржпрзБржХрзНржд рж╣рзЯрзЗржЫрзЗред ржЖржкржирж┐ рзирзлрзж ржкрзЯрзЗржирзНржЯ ржкрзЗрзЯрзЗржЫрзЗржиред`);
            }
        }
    } catch (error) {
        console.error("ржЗржЙржЬрж╛рж░ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи рждрзНрж░рзБржЯрж┐:", error);
    }

    const adminButton = is_admin ? [{ text: 'ЁЯСС ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓', web_app: { url: MINI_APP_URL + 'admin.html' } }] : [];
    
    // рж░рзЗржлрж╛рж░ ржмрж╛ржЯржи ржУ Mini App ржмрж╛ржЯржи
    ctx.reply(message, {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'ЁЯТ╕ ржЕрзНржпрж╛ржб ржжрзЗржЦрзБржи ржУ ржЗржиржХрж╛ржо ржХрж░рзБржи', web_app: { url: MINI_APP_URL } }],
                [{ text: 'ЁЯФЧ рж░рзЗржлрж╛рж░ ржХрж░рзБржи', callback_data: 'show_referral' }],
                ...adminButton // ржЕрзНржпрж╛ржбржорж┐ржи ржмрж╛ржЯржи ржпрзБржХрзНржд ржХрж░рж╛ рж╣рж▓рзЛ
            ]
        }
    });
});

bot.on('callback_query', async (ctx) => {
    if (ctx.callbackQuery.data === 'show_referral') {
        if (!pool) return ctx.answerCbQuery("рж╕рж╛рж░рзНржнрж╛рж░ ржПржЦржиржУ ржкрзНрж░рж╕рзНрждрзБржд ржиржпрж╝ред");

        const result = await pool.query('SELECT referral_code FROM users WHERE telegram_id = $1', [ctx.from.id]);
        const refCode = result.rows.length ? result.rows[0].referral_code : `r_${ctx.from.id}`;
        
        const referralLink = `https://t.me/${BOT_USERNAME}?start=${refCode}`;
        
        ctx.editMessageText(`ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХ: \n${referralLink}\n\nржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░рзЗ ржЖржкржирж┐ рзирзлрзж ржкрзЯрзЗржирзНржЯ ржкрж╛ржмрзЗржиред`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'ЁЯФЧ ржХржкрж┐ ржХрж░рзБржи ржУ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи', url: `https://t.me/share/url?url=${encodeURIComponent(referralLink)}` }]
                ]
            }
        });
    }
});


// --- рж╕рж╛рж░рзНржнрж╛рж░ рж▓рж┐рж╕рзЗржирж┐ржВ ржУ ржУржпрж╝рзЗржмрж╣рзБржХ рж╕рзЗржЯржЖржк ---
const RENDER_HOSTNAME = process.env.RENDER_EXTERNAL_HOSTNAME || "smartearnbdbot.onrender.com"; 
const WEBHOOK_URL = `https://${RENDER_HOSTNAME}/bot${BOT_TOKEN}`;

bot.telegram.setWebhook(WEBHOOK_URL).then(() => {
    console.log(`ЁЯдЦ ржмржЯ ржУржпрж╝рзЗржмрж╣рзБржХ рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: ${WEBHOOK_URL}`);
});

app.use(bot.webhookCallback(`/bot${BOT_TOKEN}`));

app.listen(PORT, () => {
    console.log(`ЁЯЪА рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж╛рж▓рзБ рж╣ржпрж╝рзЗржЫрзЗ ржкрзЛрж░рзНржЯ ${PORT} ржП`);
});
