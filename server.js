// server.js
const express = require('express');
const { Telegraf } = require('telegraf');
const { Pool } = require('pg');
// .env ржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рж╛рж░ ржЬржирзНржп, ржпржжрж┐ржУ Render ржП ржПржЯрж┐ ржжрж░ржХрж╛рж░ ржирзЗржЗ, рж▓рзЛржХрж╛рж▓ ржЯрзЗрж╕рзНржЯрж┐ржВ ржПрж░ ржЬржирзНржп рж░рж╛ржЦрж╛ ржнрж╛рж▓рзЛред
require('dotenv').config(); 

// --- ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи ржПржмржВ ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ---
const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.BOT_TOKEN;
const DATABASE_URL = process.env.DATABASE_URL;
// ржЖржкржирж╛рж░ Admin ID рж╕рзНржЯрзНрж░рж┐ржВ ржлрж░ржорзНржпрж╛ржЯрзЗ рж░рж╛ржЦрзБржи
const ADMIN_ID = process.env.ADMIN_ID ? process.env.ADMIN_ID.toString() : '8145444675'; 
const MINI_APP_URL = process.env.MINI_APP_URL || "ржЖржкржирж╛рж░_Blogger_ржмрж╛_ржлрзНрж░ржирзНржЯржПржирзНржб_URL"; 
const BOT_USERNAME = process.env.BOT_USERNAME; // ржирждрзБржи: ржмржЯрзЗрж░ ржЗржЙржЬрж╛рж░ржирзЗржо рж╕рзЗржЯ ржХрж░рж╛рж░ ржЬржирзНржп

// --- ржбрзЗржЯрж╛ржмрзЗрж╕ рж╕ржВржпрзЛржЧ ---
if (!DATABASE_URL) {
    console.error("тЭМ DATABASE_URL рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ! рж╕рж╛рж░рзНржнрж╛рж░ ржмржирзНржз рж╣ржЪрзНржЫрзЗред");
    process.exit(1);
}
const pool = new Pool({
    connectionString: DATABASE_URL,
    ssl: {
        rejectUnauthorized: false
    }
});

// ржбрзЗржЯрж╛ржмрзЗрж╕ рж╕ржВржпрзЛржЧ ржкрж░рзАржХрзНрж╖рж╛
pool.query('SELECT NOW()')
    .then(() => console.log('тЬЕ PostgreSQL ржбрзЗржЯрж╛ржмрзЗрж╕рзЗрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ рж╕ржлрж▓ред'))
    .catch((err) => {
        console.error('тЭМ ржбрзЗржЯрж╛ржмрзЗрж╕ рж╕ржВржпрзЛржЧ ржмрзНржпрж░рзНрже:', err.stack);
        process.exit(1); // рж╕ржВржпрзЛржЧ ржмрзНржпрж░рзНрже рж╣рж▓рзЗ рж╕рж╛рж░рзНржнрж╛рж░ ржмржирзНржз ржХрж░рзЗ ржжрзЗржУрзЯрж╛ ржнрж╛рж▓рзЛ
    });

// --- ржЕрзНржпрж╛ржк ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи ---
if (!BOT_TOKEN) {
    console.error("тЭМ BOT_TOKEN рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ! рж╕рж╛рж░рзНржнрж╛рж░ ржмржирзНржз рж╣ржЪрзНржЫрзЗред");
    process.exit(1);
}
const app = express();
const bot = new Telegraf(BOT_TOKEN);

app.use(express.json()); // JSON ржбрзЗржЯрж╛ ржкрж╛рж░рзНрж╕ ржХрж░рж╛рж░ ржЬржирзНржп

// Render ржПрж░ ржЬржирзНржп Webhook URL рждрзИрж░рж┐
const WEBHOOK_BASE = process.env.RENDER_EXTERNAL_HOSTNAME ? 
    `https://${process.env.RENDER_EXTERNAL_HOSTNAME}` : 
    `http://localhost:${PORT}`; // рж▓рзЛржХрж╛рж▓ ржЯрзЗрж╕рзНржЯрж┐ржВ ржПрж░ ржЬржирзНржп 
const WEBHOOK_PATH = `/bot${BOT_TOKEN}`;
const WEBHOOK_URL = `${WEBHOOK_BASE}${WEBHOOK_PATH}`;


// --- рзз. ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ рж▓ржЬрж┐ржХ ---

// рждрзНрж░рзБржЯрж┐ рж╣рзНржпрж╛ржирзНржбрзЗрж▓рж┐ржВ: ржмржЯ-ржПрж░ рждрзНрж░рзБржЯрж┐ ржзрж░рзБржи
bot.catch((err, ctx) => {
    console.error(`[Telegraf] ${ctx.updateType} ржЖржкржбрзЗржЯрзЗ рждрзНрж░рзБржЯрж┐:`, err);
});

// ржмржЯ рж╕рзНржЯрж╛рж░рзНржЯ ржПржмржВ рж░рзЗржлрж╛рж░рзЗрж▓ рж╣рзНржпрж╛ржирзНржбрзЗрж▓рж┐ржВ
bot.start(async (ctx) => {
    const telegramId = ctx.from.id;
    const is_admin = telegramId.toString() === ADMIN_ID;
    
    // рж░рзЗржлрж╛рж░рзЗрж▓ ржХрзЛржб ржмрзЗрж░ ржХрж░рж╛
    const payload = ctx.startPayload; 
    let referrerCode = null;
    if (payload && payload.startsWith('r_')) { // Null/undefined ржЪрзЗржХ ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ
        referrerCode = payload.substring(2); 
    }
    
    let message = `рж╕рзНржмрж╛ржЧрждржо ${ctx.from.first_name}! EarnQuick_Official_bot ржП ржЕрзНржпрж╛ржб ржжрзЗржЦрзЗ ржЖрзЯ ржХрж░рж╛ рж╢рзБрж░рзБ ржХрж░рзБржиред`;
    
    // ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржЗржЙржЬрж╛рж░ ржирж┐ржмржирзНржзржи ржПржмржВ рж░рзЗржлрж╛рж░рзЗрж▓ ржмрзЛржирж╛рж╕ рж▓ржЬрж┐ржХ
    try {
        const result = await registerUser(pool, telegramId, ctx.from.username, referrerCode); // Pool ржкрж╛рж╕ ржХрж░рж╛
        if (result.isNew && result.bonus && result.referrerId) {
            message += `\nЁЯОБ ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж┐ рж░рзЗржлрж╛рж░рзЗрж▓рзЗрж░ ржорж╛ржзрзНржпржорзЗ ржПрж╕рзЗржЫрзЗржиред`;
            // ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ рж░рзЗржлрж╛рж░рж╛рж░ржХрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
            ctx.telegram.sendMessage(result.referrerId, `ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ ржХрж░рж╛ ржирждрзБржи ржЗржЙржЬрж╛рж░ ржпрзБржХрзНржд рж╣рзЯрзЗржЫрзЗред ржЖржкржирж┐ рзирзлрзж ржкрзЯрзЗржирзНржЯ ржкрзЗрзЯрзЗржЫрзЗржиред`);
        }
    } catch (error) {
        console.error("ржЗржЙржЬрж╛рж░ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи рждрзНрж░рзБржЯрж┐:", error);
    }

    // ржХрж┐ржмрзЛрж░рзНржб ржмрж╛ржЯржи рждрзИрж░рж┐
    const adminButton = is_admin ? [{ text: 'ЁЯСС ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓', web_app: { url: MINI_APP_URL + '/admin.html' } }] : [];
    
    ctx.reply(message, {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'ЁЯТ╕ ржЕрзНржпрж╛ржб ржжрзЗржЦрзБржи ржУ ржЗржиржХрж╛ржо ржХрж░рзБржи', web_app: { url: MINI_APP_URL } }],
                [{ text: 'ЁЯФЧ рж░рзЗржлрж╛рж░ ржХрж░рзБржи', callback_data: 'show_referral' }],
                ...adminButton
            ]
        }
    });
});

// рж░рзЗржлрж╛рж░рзЗрж▓ рж▓ржЬрж┐ржХ ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп ржЕрзНржпрж╛ржХрж╢ржи
bot.on('callback_query', async (ctx) => {
    if (ctx.callbackQuery.data === 'show_referral') {
        const user = await pool.query('SELECT referral_code FROM users WHERE telegram_id = $1', [ctx.from.id]);
        
        if (user.rows.length === 0) {
            return ctx.editMessageText('ржЖржкржирж╛рж░ ржЗржЙржЬрж╛рж░ ржбрзЗржЯрж╛ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред /start рж▓рж┐ржЦрзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред');
        }
        
        const refCode = user.rows[0].referral_code;
        // рж╕ржВрж╢рзЛржзрж┐ржд: ржмржЯрзЗрж░ ржЗржЙржЬрж╛рж░ржирзЗржо ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рж╛рж░ ржЬржирзНржп try-catch ржмрж╛ BOT_USERNAME ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ
        const botUsername = BOT_USERNAME || (await bot.telegram.getMe()).username; 
        const referralLink = `https://t.me/${botUsername}?start=r_${refCode}`;
        
        ctx.editMessageText(`ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХ: \n${referralLink}\n\nржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░рзЗ ржЖржкржирж┐ рзирзлрзж ржкрзЯрзЗржирзНржЯ ржкрж╛ржмрзЗржиред`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржХржкрж┐ ржХрж░рзБржи', url: `https://t.me/share/url?url=${encodeURIComponent(referralLink)}` }]
                ]
            }
        });
    }
});

// --- рзи. API рж░рзБржЯ (Monetag ржУ Withdraw) ---

// API рж░рж╛ржЙржЯрж╛рж░ рж╕рзЗржЯржЖржк
const apiRouter = express.Router();

// ржХ. ржоржирж┐ржЯрзЗржЧ S2S ржХрж▓ржмрзНржпрж╛ржХ API
apiRouter.post('/monetag-callback', async (req, res) => {
    // SECURITY: ржЖржкржирж╛ржХрзЗ ржЕржмрж╢рзНржпржЗ ржПржЦрж╛ржирзЗ ржоржирж┐ржЯрзЗржЧрзЗрж░ рж╕рж┐ржХрж┐ржЙрж░рж┐ржЯрж┐ ржЯрзЛржХрзЗржи ржмрж╛ рж╣рзНржпрж╛рж╢ ржЪрзЗржХ ржХрж░рждрзЗ рж╣ржмрзЗ
    // if (req.query.secret !== process.env.MONETAG_SECRET_KEY) { return res.status(403).send('Forbidden'); } 

    const { user_id, transaction_id, status } = req.body; 

    if (!user_id || !transaction_id || status !== 'success') {
        return res.status(400).json({ status: 'error', message: 'ржмрзНржпрж░рзНрже ржЯрзНрж░рж╛ржиржЬрзЗржХрж╢ржи ржмрж╛ ржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржбрзЗржЯрж╛ ржЕржирзБржкрж╕рзНржерж┐ржд' });
    }

    try {
        // ржбрж╛ржмрж▓-ржХрзНрж░рзЗржбрж┐ржЯ ржПржбрж╝рж╛ржирзЛрж░ ржЬржирзНржп ad_view_logs ржЯрзЗржмрж┐рж▓рзЗ ржЗржирж╕рж╛рж░рзНржЯ ржЪрзЗрж╖рзНржЯрж╛
        const logResult = await pool.query(
            'INSERT INTO ad_view_logs (user_id, monetag_transaction_id, points_awarded, is_verified) VALUES ($1, $2, 5, TRUE) ON CONFLICT (monetag_transaction_id) DO NOTHING RETURNING log_id',
            [user_id, transaction_id]
        );

        if (logResult.rows.length > 0) {
            // рзл ржкрзЯрзЗржирзНржЯ ржкрзНрж░ржжрж╛ржи
            await pool.query(
                'UPDATE users SET total_points = total_points + 5 WHERE telegram_id = $1',
                [user_id]
            );
            return res.json({ status: 'ok', message: 'ржкржпрж╝рзЗржирзНржЯ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ' });
        } else {
            return res.json({ status: 'info', message: 'ржбрзБржкрзНрж▓рж┐ржХрзЗржЯ ржЯрзНрж░рж╛ржиржЬрзЗржХрж╢ржи ржЖржЗржбрж┐ ржПржбрж╝рж┐ржпрж╝рзЗ ржпрж╛ржУржпрж╝рж╛ рж╣рж▓рзЛ' });
        }
    } catch (error) {
        console.error('Monetag ржХрж▓ржмрзНржпрж╛ржХ рждрзНрж░рзБржЯрж┐:', error);
        res.status(500).json({ status: 'error', message: 'рж╕рж╛рж░рзНржнрж╛рж░ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг рждрзНрж░рзБржЯрж┐' });
    }
});


// ржЦ. ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ API
apiRouter.post('/withdraw', async (req, res) => {
    // ржЗржиржкрзБржЯ ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи
    const { telegramId, points, paymentAddress } = req.body;
    if (!telegramId || !points || !paymentAddress) {
        return res.status(400).json({ success: false, message: "тЭМ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржбрзЗржЯрж╛ ржЕржирзБржкрж╕рзНржерж┐рждред" });
    }
    
    try {
        const result = await handleWithdrawRequest(pool, telegramId, points, paymentAddress);
        
        if (result.success) {
            // ржЙржЗржержбрзНрж░ рж╕ржлрж▓ рж╣рж▓рзЗ ржЕрзНржпрж╛ржбржорж┐ржиржХрзЗ ржирзЛржЯрж┐ржлрж╛ржЗ ржХрж░рзБржи
            const amountInBdt = pointsToBdt(points);
            const message = `ЁЯЪи ржирждрзБржи ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ!\nржЗржЙржЬрж╛рж░ ID: ${telegramId}\nржкржпрж╝рзЗржирзНржЯ: ${points}\nржЯрж╛ржХрж╛: ${amountInBdt.toFixed(2)} BDT\nржкрзЗржорзЗржирзНржЯ ржЕрзНржпрж╛ржбрзНрж░рзЗрж╕: ${paymentAddress}`;
            bot.telegram.sendMessage(ADMIN_ID, message);
            
            return res.status(200).json(result);
        } else {
            return res.status(400).json(result);
        }
    } catch (error) {
        console.error("ржЙржЗржержбрзНрж░ API рждрзНрж░рзБржЯрж┐:", error);
        return res.status(500).json({ success: false, message: "тЭМ ржПржХржЯрж┐ ржЕржнрзНржпржирзНрждрж░рзАржг рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред" });
    }
});

// рж╕ржорж╕рзНржд API рж░рзБржЯ ржпрзБржХрзНржд ржХрж░рж╛
app.use('/api', apiRouter);

// --- рзй. рж╕рж╛рж░рзНржнрж╛рж░ рж▓рж┐рж╕рзЗржирж┐ржВ ржПржмржВ ржУржпрж╝рзЗржмрж╣рзБржХ рж╕рзЗржЯржЖржк ---

// рж░рзБржЯ ржЧрзЗржЯ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ рж╕рж╛ржзрж╛рж░ржг рж╕рж╛ржбрж╝рж╛ (Render ржЪрзЗржХ ржХрж░рж╛рж░ ржЬржирзНржп)
app.get('/', (req, res) => {
    res.send('EarnQuick_Official_bot рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж╛рж▓рзБ ржЖржЫрзЗред');
});

// ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржУржпрж╝рзЗржмрж╣рзБржХ рж╕рзЗржЯ ржХрж░рж╛
// bot.telegram.setWebhook() рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржХржмрж╛рж░ рж╕рзЗржЯ ржХрж░рж╛ ржЙржЪрж┐ржд, рж╕рж╛рж░рзНржнрж╛рж░ рж╕рзНржЯрж╛рж░рзНржЯ рж╣ржУрзЯрж╛рж░ ржкрж░
bot.telegram.setWebhook(WEBHOOK_URL)
    .then(() => console.log(`тЬЕ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржУржпрж╝рзЗржмрж╣рзБржХ рж╕рзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ: ${WEBHOOK_URL}`))
    .catch((err) => console.error("тЭМ ржУржпрж╝рзЗржмрж╣рзБржХ рж╕рзЗржЯржЖржк рждрзНрж░рзБржЯрж┐:", err));

app.use(bot.webhookCallback(WEBHOOK_PATH));


app.listen(PORT, async () => {
    console.log(`ЁЯЪА рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж╛рж▓рзБ рж╣ржпрж╝рзЗржЫрзЗ ржкрзЛрж░рзНржЯ ${PORT} ржП`);
    // ржирж┐рж╢рзНржЪрж┐ржд ржЗржЙржЬрж╛рж░ржирзЗржо ржкрзНрж░рж┐ржирзНржЯ ржХрж░рж╛рж░ ржЬржирзНржп
    try {
        const me = await bot.telegram.getMe();
        bot.options.username = me.username; // bot.options.username рж╕рзЗржЯ ржХрж░рж╛ рж╣рж▓рзЛ
        console.log(`ржмржЯ ржЗржЙржЬрж╛рж░ржирзЗржо: @${me.username}`); 
    } catch (e) {
        console.warn("ржмржЯрзЗрж░ ржЗржЙржЬрж╛рж░ржирзЗржо ржкрзЗрждрзЗ ржмрзНржпрж░рзНржеред");
    }
});

// --- *ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг рж▓ржЬрж┐ржХ ржлрж╛ржВрж╢ржи* ---

// ржкржпрж╝рзЗржирзНржЯ ржХржиржнрж╛рж░рзНрж╕ржи ржлрж╛ржВрж╢ржи
function pointsToBdt(points) {
    return (points / 10000) * 40;
}

// ржЗржЙржЬрж╛рж░ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи ржПржмржВ рж░рзЗржлрж╛рж░рзЗрж▓ ржмрзЛржирж╛рж╕ рж▓ржЬрж┐ржХ
async function registerUser(pool, telegramId, username, referrerCode) { // pool ржЗржиржкрзБржЯ рж╣рж┐рж╕рзЗржмрзЗ ржирзЗржУрзЯрж╛ рж╣рж▓рзЛ
    const newReferralCode = 'r_' + telegramId; 
    let referrerId = null;
    let bonus = false;
    let isNewUser = false;

    // ржЗржЙржЬрж╛рж░ ржХрж┐ ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржЖржЫрзЗ? ржЪрзЗржХ ржХрж░рзБржи
    const existingUser = await pool.query('SELECT telegram_id FROM users WHERE telegram_id = $1', [telegramId]);
    if (existingUser.rows.length > 0) {
        return { isNew: false };
    }
    
    isNewUser = true;

    // рж░рзЗржлрж╛рж░рж╛рж░ ржЪрзЗржХ ржПржмржВ ржмрзЛржирж╛рж╕ ржкрзНрж░ржжрж╛ржи
    if (referrerCode) {
        const referrer = await pool.query('SELECT telegram_id FROM users WHERE referral_code = $1', [referrerCode]);
        if (referrer.rows.length) {
            referrerId = referrer.rows[0].telegram_id;
            // рж░рзЗржлрж╛рж░рж╛рж░ржХрзЗ ржкрзЯрзЗржирзНржЯ ржжрзЗржУрзЯрж╛
            await pool.query('UPDATE users SET total_points = total_points + 250 WHERE telegram_id = $1', [referrerId]);
            bonus = true;
        }
    }

    try {
        await pool.query(
            'INSERT INTO users (telegram_id, username, total_points, referred_by_id, referral_code) VALUES ($1, $2, $3, $4, $5)',
            [telegramId, username, 0, referrerId, newReferralCode]
        );
        return { isNew: isNewUser, referrerId: referrerId, bonus: bonus };
    } catch (e) {
        // ржпржжрж┐ ржбрж╛ржЯрж╛ржмрзЗрж╕рзЗ ржЕржирзНржп ржХрзЛржирзЛ рждрзНрж░рзБржЯрж┐ рж╣рзЯ
        console.error("ржбрж╛ржЯрж╛ржмрзЗрж╕ INSERT рждрзНрж░рзБржЯрж┐:", e);
        return { isNew: false };
    }
}

// ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ рж╣рзНржпрж╛ржирзНржбрзЗрж▓рж┐ржВ ржлрж╛ржВрж╢ржи (ржЖржЧрзЗрж░ рж▓ржЬрж┐ржХ ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд)
async function handleWithdrawRequest(pool, telegramId, requestedPoints, paymentAddress) {
    const WITHDRAW_START_HOUR = 6;
    const WITHDRAW_END_HOUR = 20; 
    const MIN_WITHDRAW_POINTS = 10000;
    const MAX_WITHDRAW_POINTS = 100000;
    const DAILY_LIMIT = 3;
    const now = new Date();
    const currentHour = now.getHours();

    // ржЯрж╛ржЗржо ржЪрзЗржХ (рж╕рж╛рж░рзНржнрж╛рж░ ржЯрж╛ржЗржо ржЕржирзБржпрж╛рзЯрзА)
    if (currentHour < WITHDRAW_START_HOUR || currentHour >= WITHDRAW_END_HOUR) {
        return { success: false, message: "тЭМ ржЙржЗржержбрзНрж░ ржЪрж╛рж▓рзБ рж╕ржХрж╛рж▓ рзмржЯрж╛ ржерзЗржХрзЗ рж░рж╛ржд рзоржЯрж╛ ржкрж░рзНржпржирзНрждред ржмрж░рзНрждржорж╛ржирзЗ ржмржирзНржз ржЖржЫрзЗред" };
    }
    
    // ржкржпрж╝рзЗржирзНржЯ рж▓рж┐ржорж┐ржЯ ржЪрзЗржХ
    if (requestedPoints < MIN_WITHDRAW_POINTS || requestedPoints > MAX_WITHDRAW_POINTS) {
        return { success: false, message: `ржкржпрж╝рзЗржирзНржЯ рж▓рж┐ржорж┐ржЯ ${MIN_WITHDRAW_POINTS} ржерзЗржХрзЗ ${MAX_WITHDRAW_POINTS} ржПрж░ ржоржзрзНржпрзЗ рж╣рждрзЗ рж╣ржмрзЗред` };
    }

    const client = await pool.connect();
    try {
        await client.query('BEGIN');

        // ржЗржЙржЬрж╛рж░ ржбрзЗржЯрж╛ ржЪрзЗржХ
        const userResult = await client.query(
            'SELECT total_points, daily_withdraw_count FROM users WHERE telegram_id = $1 FOR UPDATE',
            [telegramId]
        );
        const user = userResult.rows[0];

        if (!user || user.total_points < requestedPoints) {
            return { success: false, message: "ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржпржерзЗрж╖рзНржЯ ржкрзЯрзЗржирзНржЯ ржирзЗржЗред" };
        }
        if (user.daily_withdraw_count >= DAILY_LIMIT) {
            return { success: false, message: `ржжрзИржирж┐ржХ ржЙржЗржержбрзНрж░ рж▓рж┐ржорж┐ржЯ (${DAILY_LIMIT} ржмрж╛рж░) ржЕрждрж┐ржХрзНрж░ржо ржХрж░рзЗржЫрзЗржиред` };
        }

        // рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ рж╕рзЗржн
        const amountInBdt = pointsToBdt(requestedPoints);
        await client.query(
            'INSERT INTO withdraw_requests (user_id, points_requested, amount_in_bdt, payment_address) VALUES ($1, $2, $3, $4)',
            [telegramId, requestedPoints, amountInBdt, paymentAddress]
        );

        // ржкржпрж╝рзЗржирзНржЯ ржЖржкржбрзЗржЯ
        await client.query(
            'UPDATE users SET total_points = total_points - $1, daily_withdraw_count = daily_withdraw_count + 1 WHERE telegram_id = $2',
            [requestedPoints, telegramId]
        );

        await client.query('COMMIT');
        return { success: true, message: `тЬЕ ${requestedPoints} ржкржпрж╝рзЗржирзНржЯрзЗрж░ (${amountInBdt.toFixed(2)} BDT) ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЬржорж╛ рж╣ржпрж╝рзЗржЫрзЗред` };

    } catch (e) {
        await client.query('ROLLBACK');
        return { success: false, message: "тЭМ ржПржХржЯрж┐ ржЕржнрзНржпржирзНрждрж░рзАржг рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред" };
    } finally {
        client.release();
    }
}
