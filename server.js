// server.js
const express = require('express');
const { Telegraf } = require('telegraf');
const { pool } = require('./db'); // db.js ржерзЗржХрзЗ pool ржЖржоржжрж╛ржирж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ
require('dotenv').config(); 

// ржоржбрж┐ржЙрж▓ржЧрзБрж▓рж┐ ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рж╛
const { registerUser, MIN_WITHDRAW_POINTS, MAX_WITHDRAW_POINTS } = require('./logic');
const apiRouter = require('./api'); 

// --- ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи ржПржмржВ ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ---
const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = process.env.ADMIN_ID ? process.env.ADMIN_ID.toString() : '8145444675'; 
const MINI_APP_URL = process.env.MINI_APP_URL || "ржЖржкржирж╛рж░_Blogger_ржмрж╛_ржлрзНрж░ржирзНржЯржПржирзНржб_URL"; 
const BOT_USERNAME = process.env.BOT_USERNAME; 

if (!BOT_TOKEN) {
    console.error("тЭМ BOT_TOKEN рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ! рж╕рж╛рж░рзНржнрж╛рж░ ржмржирзНржз рж╣ржЪрзНржЫрзЗред");
    process.exit(1);
}
const app = express();
const bot = new Telegraf(BOT_TOKEN);

app.use(express.json()); 

// Render ржПрж░ ржЬржирзНржп Webhook URL рждрзИрж░рж┐
const WEBHOOK_BASE = process.env.RENDER_EXTERNAL_HOSTNAME ? 
    `https://${process.env.RENDER_EXTERNAL_HOSTNAME}` : 
    `http://localhost:${PORT}`; 
const WEBHOOK_PATH = `/bot${BOT_TOKEN}`;
const WEBHOOK_URL = `${WEBHOOK_BASE}${WEBHOOK_PATH}`;


// --- рзз. ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ рж▓ржЬрж┐ржХ ---

bot.catch((err, ctx) => {
    console.error(`[Telegraf] ${ctx.updateType} ржЖржкржбрзЗржЯрзЗ рждрзНрж░рзБржЯрж┐:`, err);
    ctx.reply('ржжрзБржГржЦрж┐ржд, ржПржХржЯрж┐ ржЕржнрзНржпржирзНрждрж░рзАржг рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред');
});

// ржмржЯ рж╕рзНржЯрж╛рж░рзНржЯ ржПржмржВ рж░рзЗржлрж╛рж░рзЗрж▓ рж╣рзНржпрж╛ржирзНржбрзЗрж▓рж┐ржВ
bot.start(async (ctx) => {
    const telegramId = ctx.from.id;
    const is_admin = telegramId.toString() === ADMIN_ID;
    
    const payload = ctx.startPayload; 
    let referrerCode = null;
    if (payload && payload.startsWith('r_')) { 
        referrerCode = payload.substring(2); 
    }
    
    let message = `рж╕рзНржмрж╛ржЧрждржо ${ctx.from.first_name}! EarnQuick_Official_bot ржП ржЕрзНржпрж╛ржб ржжрзЗржЦрзЗ ржЖрзЯ ржХрж░рж╛ рж╢рзБрж░рзБ ржХрж░рзБржиред`;
    
    try {
        const result = await registerUser(telegramId, ctx.from.username, referrerCode); 
        
        if (result.isNew) {
            message += `\nЁЯОЙ ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗред`;
            if (result.bonus && result.referrerId) {
                message += `\nЁЯОБ ржЖржкржирж┐ рж░рзЗржлрж╛рж░рзЗрж▓рзЗрж░ ржорж╛ржзрзНржпржорзЗ ржПрж╕рзЗржЫрзЗржиред`;
                ctx.telegram.sendMessage(result.referrerId, `ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ ржХрж░рж╛ ржирждрзБржи ржЗржЙржЬрж╛рж░ ржпрзБржХрзНржд рж╣рзЯрзЗржЫрзЗред ржЖржкржирж┐ рзирзлрзж ржкрзЯрзЗржирзНржЯ ржкрзЗрзЯрзЗржЫрзЗржиред`);
            }
        } else {
             message += `\nржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржЗрждрж┐ржоржзрзНржпрзЗ рждрзИрж░рж┐ ржЖржЫрзЗред`;
        }
    } catch (error) {
        console.error("ржЗржЙржЬрж╛рж░ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи рждрзНрж░рзБржЯрж┐:", error);
    }

    const adminButton = is_admin ? [{ text: 'ЁЯСС ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓ (Coming Soon)', web_app: { url: MINI_APP_URL + '/admin.html' } }] : [];
    
    ctx.reply(message, {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'ЁЯТ╕ ржЕрзНржпрж╛ржб ржжрзЗржЦрзБржи ржУ ржЗржиржХрж╛ржо ржХрж░рзБржи', web_app: { url: MINI_APP_URL } }],
                [{ text: 'ЁЯФЧ рж░рзЗржлрж╛рж░ ржХрж░рзБржи', callback_data: 'show_referral' }],
                ...adminButton
            ]
        }
    });
});

// рж░рзЗржлрж╛рж░рзЗрж▓ рж▓ржЬрж┐ржХ ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп ржЕрзНржпрж╛ржХрж╢ржи
bot.on('callback_query', async (ctx) => {
    if (ctx.callbackQuery.data === 'show_referral') {
        try {
            const user = await pool.query('SELECT referral_code FROM users WHERE telegram_id = $1', [ctx.from.id]);
            
            if (user.rows.length === 0) {
                return ctx.editMessageText('ржЖржкржирж╛рж░ ржЗржЙржЬрж╛рж░ ржбрзЗржЯрж╛ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред /start рж▓рж┐ржЦрзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред');
            }
            
            const refCode = user.rows[0].referral_code;
            
            const botUsername = bot.options.username || BOT_USERNAME || (await bot.telegram.getMe()).username; 
            const referralLink = `https://t.me/${botUsername}?start=r_${refCode}`;
            
            ctx.editMessageText(`ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХ: \n\`${referralLink}\`\n\nржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░рзЗ ржЖржкржирж┐ рзирзлрзж ржкрзЯрзЗржирзНржЯ ржкрж╛ржмрзЗржиред`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржХржкрж┐ ржХрж░рзБржи', url: `https://t.me/share/url?url=${encodeURIComponent(referralLink)}` }]
                    ]
                }
            });
        } catch (e) {
            console.error("рж░рзЗржлрж╛рж░рзЗрж▓ рж▓ржЬрж┐ржХ рждрзНрж░рзБржЯрж┐:", e);
            ctx.reply('рж░рзЗржлрж╛рж░рзЗрж▓ ржбрзЗржЯрж╛ ржЖржирждрзЗ ржмрзНржпрж░рзНржеред');
        }
    }
});


// --- рзи. API рж░рзБржЯ ржпрзБржХрзНржд ржХрж░рж╛ ---
// bot ржПржмржВ adminId ржХрзЗ api.js ржП ржкрж╛ржарж╛ржирзЛ рж╣рж▓рзЛ
app.use('/api', apiRouter(bot, ADMIN_ID));


// --- рзй. рж╕рж╛рж░рзНржнрж╛рж░ рж▓рж┐рж╕рзЗржирж┐ржВ ---

app.get('/', (req, res) => {
    res.send('EarnQuick_Official_bot рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж╛рж▓рзБ ржЖржЫрзЗред');
});

bot.telegram.setWebhook(WEBHOOK_URL)
    .then(() => console.log(`тЬЕ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржУржпрж╝рзЗржмрж╣рзБржХ рж╕рзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ: ${WEBHOOK_URL}`))
    .catch((err) => console.error("тЭМ ржУржпрж╝рзЗржмрж╣рзБржХ рж╕рзЗржЯржЖржк рждрзНрж░рзБржЯрж┐:", err));

app.use(bot.webhookCallback(WEBHOOK_PATH));


app.listen(PORT, async () => {
    console.log(`ЁЯЪА рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж╛рж▓рзБ рж╣ржпрж╝рзЗржЫрзЗ ржкрзЛрж░рзНржЯ ${PORT} ржП`);
    try {
        const me = await bot.telegram.getMe();
        bot.options.username = me.username; 
        console.log(`ржмржЯ ржЗржЙржЬрж╛рж░ржирзЗржо: @${me.username}`); 
    } catch (e) {
        console.warn("ржмржЯрзЗрж░ ржЗржЙржЬрж╛рж░ржирзЗржо ржкрзЗрждрзЗ ржмрзНржпрж░рзНржеред");
    }
});
